{"pages":[],"posts":[{"title":"1. 两数之和","text":"leetcode 本题链接 题目描述给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。 你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素 示例: 给定 nums = [2, 7, 11, 15], target = 9 因为 nums[0] + nums[1] = 2 + 7 = 9 所以返回 [0, 1] 暴力解法 两层遍历 （虽然可以通过，但是速度很慢） 123456789var twoSum = function (nums: number[], target: number) { for (let i = 0, len = nums.length; i &lt; len - 1; i++) { for (let j = i + 1; j &lt; len; j++) { if (nums[i] + nums[j] === target) { return [i, j]; } } }}; 提交时间 提交结果 执行用时 内存消耗 语言 1年前 通过 148 ms N/A Javascript 用哈希表做记忆化由于每个值只能用一，在这里相当用哈希表存储 存储 值作为键，索引作为值（在各种记忆化的场景中都会用到） 123456789101112var twoSum = function (nums: number[], target: number) { let map: { [index: number]: number } = {}; nums.forEach((i: number, index) =&gt; { map[i] = index; }); for (let i = 0; i &lt; nums.length; i++) { let sec = target - nums[i]; if (!!map[sec] &amp;&amp; map[sec] !== i) { return [i, map[sec]]; // 这里ts 推断的 返回值的类型 是 number[]， 而不是 [number,number] ,而且这里可能不进这个if语句,ts又是如何判断的呢 } }}; 提交时间 提交结果 执行用时 内存消耗 语言 6 个月前 通过 92 ms 35.3 MB Javascript","link":"/2019/11/02/1.%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"}],"tags":[],"categories":[]}